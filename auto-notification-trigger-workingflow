📋 COMPLETED AUTO-NOTIFICATION TRIGGERS
1. Welcome Notification ✅
File: TASK_11_WELCOME_NOTIFICATION_FUNCTION.js
Function Name: onQRScanWelcome
Trigger Type: Firestore Trigger (onCreate)

Trigger Event:
Firebase Collection: 'qr_scans'
Event: onCreate (when new document is created)

Working Flow:
┌─────────────────────────────────────────────────────────────┐
│ USER SCANS SELLER QR CODE                                    │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ App creates document in 'qr_scans' collection               │
│ Data: { userId, sellerId, scannedAt, qrCode }              │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ CLOUD FUNCTION TRIGGERED: onQRScanWelcome                   │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 1. Check if First Scan                                       │
│    - Query 'qr_scans' for userId + sellerId                │
│    - If count > 1, exit (not first scan)                   │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 2. Retrieve Seller Settings                                  │
│    - Get seller's auto-notification preferences             │
│    - Check if welcome notification is enabled               │
│    - Get custom message template (if any)                   │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 3. Check Rate Limits                                         │
│    - Max 1 notification per user per day per seller         │
│    - Query recent notifications to prevent spam             │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 4. Get User's FCM Token                                      │
│    - Retrieve from 'users/{userId}' document                │
│    - Field: fcmToken                                         │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 5. Send FCM Notification                                     │
│    Title: "Welcome to [Seller Name]!"                       │
│    Body: "Thanks for scanning! Follow us for exclusive..."  │
│    Data: { type: 'welcome', sellerId, route: '/seller...' }│
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 6. Log Notification                                          │
│    - Create document in 'notification_analytics'            │
│    - Track: sent, delivered status                          │
└─────────────────────────────────────────────────────────────┘

Default Message:
> "Welcome to [Seller Name]! Thanks for scanning our QR code. Follow us for exclusive offers and updates."

2. Thank You Notification ✅
File: TASK_11_THANK_YOU_NOTIFICATION_FUNCTION.js
Function Name: onOfferRedemptionThankYou
Trigger Type: Firestore Trigger (onCreate)

Trigger Event:
Firebase Collection: 'offer_redemptions'
Event: onCreate (when offer is redeemed)
┌─────────────────────────────────────────────────────────────┐
│ USER REDEEMS OFFER (Scans Offer QR or Digital Redemption)  │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ App creates document in 'offer_redemptions' collection      │
│ Data: { userId, offerId, sellerId, redeemedAt }            │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ CLOUD FUNCTION TRIGGERED: onOfferRedemptionThankYou        │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 1. Retrieve Offer Details                                    │
│    - Get offer title, type, discount from 'offers'          │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 2. Retrieve Seller Settings                                  │
│    - Check if thank you notification is enabled             │
│    - Get custom message template                            │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 3. Check Rate Limits                                         │
│    - Prevent multiple thank you messages                     │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 4. Get User's FCM Token                                      │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 5. Send FCM Notification                                     │
│    Title: "Thank You for Redeeming!"                        │
│    Body: "Enjoy your [Offer Name]. Visit us again soon!"    │
│    Data: { type: 'thank_you', offerId, sellerId }          │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 6. Log Notification                                          │
└─────────────────────────────────────────────────────────────┘


Default Message:
> "Thank you for redeeming [Offer Name]! We hope you enjoy it. Visit us again soon for more exclusive offers."

3. Offer Reminder Notification ✅
File: TASK_11_OFFER_REMINDER_FUNCTION.js
Function Name: sendOfferReminders
Trigger Type: Scheduled Function (Cloud Scheduler)

Trigger Event:
Schedule: Every day at 10:00 AM (cron: '0 10 * * *')
Purpose: Remind users about offers expiring in 24 hours

Working Flow:
┌─────────────────────────────────────────────────────────────┐
│ CLOUD SCHEDULER RUNS DAILY AT 10:00 AM                      │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ CLOUD FUNCTION TRIGGERED: sendOfferReminders               │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 1. Identify Expiring Offers                                  │
│    - Query 'offers' collection                               │
│    - Filter: validUntil between now and now+24h             │
│    - Filter: status = 'active'                              │
│    - Filter: reminderSent = false                           │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 2. For Each Expiring Offer                                   │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 3. Get Seller's Followers                                    │
│    - Query 'seller_followers' where sellerId matches        │
│    - Filter: notificationsEnabled = true                    │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 4. Filter Unredeemed Users                                   │
│    - Check 'offer_redemptions' collection                   │
│    - Exclude users who already redeemed this offer          │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 5. Check Seller Settings & Rate Limits                      │
│    - Verify reminder notifications enabled                   │
│    - Check daily notification quota                          │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 6. Send Batch FCM Notifications                             │
│    Title: "Offer Expiring Soon!"                            │
│    Body: "[Offer Name] expires in 24 hours. Redeem now!"    │
│    Data: { type: 'offer_reminder', offerId, sellerId }     │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 7. Mark Offer as Reminded                                    │
│    - Update offer: reminderSent = true                      │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 8. Log Notifications                                         │
│    - Track sent count, delivery status                       │
└─────────────────────────────────────────────────────────────┘


Default Message:
> "[Offer Name] expires in 24 hours! Don't miss out on [discount/benefit]. Redeem now before it's gone!"

4. Re-engagement Notification ✅
File: TASK_11_RE_ENGAGEMENT_FUNCTION.js
Function Name: sendReEngagementNotifications
Trigger Type: Scheduled Function (Cloud Scheduler)

Trigger Event:
Schedule: Every week on Monday at 9:00 AM (cron: '0 9 * * 1')
Purpose: Re-engage inactive followers (no activity for 30 days)

Working Flow:
┌─────────────────────────────────────────────────────────────┐
│ CLOUD SCHEDULER RUNS WEEKLY (MONDAY 9:00 AM)               │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ CLOUD FUNCTION TRIGGERED: sendReEngagementNotifications    │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 1. Identify Inactive Followers                               │
│    - Query 'seller_followers' collection                     │
│    - Filter: followedAt < 30 days ago                       │
│    - Filter: notificationsEnabled = true                    │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 2. Check User Activity                                       │
│    - Query 'qr_scans' for recent scans (last 30 days)      │
│    - Query 'offer_redemptions' for recent redemptions       │
│    - Exclude users with recent activity                      │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 3. For Each Inactive User                                    │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 4. Retrieve Seller Settings                                  │
│    - Check if re-engagement notification enabled            │
│    - Get custom message template                            │
│    - Check notification quota                               │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 5. Check Rate Limits                                         │
│    - Max 1 re-engagement per user per seller per month      │
│    - Query notification history                              │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 6. Get User's FCM Token                                      │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 7. Send FCM Notification                                     │
│    Title: "We Miss You!"                                     │
│    Body: "Check out our latest offers at [Seller Name]"     │
│    Data: { type: 're_engagement', sellerId }               │
└─────────────────────────────────────────────────────────────┘
                           ↓
┌─────────────────────────────────────────────────────────────┐
│ 8. Log Notification                                          │
│    - Track sent count, delivery status                       │
└─────────────────────────────────────────────────────────────┘

Default Message:
> "We miss you! It's been a while since your last visit to [Seller Name]. Check out our latest offers and exclusive deals!"

🔧 TECHNICAL SPECIFICATIONS
Firebase Collections Used:
qr_scans - Triggers welcome notification
offer_redemptions - Triggers thank you notification
offers - Checked by offer reminder scheduler
seller_followers - Used by all functions for targeting
users - Stores FCM tokens
notification_analytics - Logs all sent notifications
seller_auto_notification_settings - Seller preferences
Rate Limiting:
Welcome: 1 per user per seller (first scan only)
Thank You: 1 per offer redemption
Offer Reminder: 1 per offer per user
Re-engagement: 1 per user per seller per month
Notification Quota:
All auto-notifications consume from seller's notification quota managed by NotificationQuotaService.


Notification Types Handled:
welcome → Navigate to seller profile
thank_you → Navigate to offer details
offer_reminder → Navigate to offer details
re_engagement → Navigate to seller profile
✅ SUMMARY
All 4 auto-notification triggers are COMPLETED and DEPLOYED on the backend:
✅ Welcome Notification - Firestore trigger on QR scan
✅ Thank You Notification - Firestore trigger on offer redemption
✅ Offer Reminder - Scheduled daily at 10:00 AM
✅ Re-engagement - Scheduled weekly on Monday at 9:00 AM


